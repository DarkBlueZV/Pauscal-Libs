<Datos><Nombre></Nombre><Icono>AA==</Icono><Version><Mayor>0</Mayor><Menor>0</Menor><Revision>0</Revision><AutoIncr>0</AutoIncr></Version><Info/><Contenido>Importar "Apis.prp"
Importar "Constantes.prp"
Importar "Memoria.prp"
'Importar "Utiles.prp"

$24ADV-
$24EBC-
$24CED-

' 26/03/2015
' Reemplazado CopyMemory por MemoriaCopiar.
' Curiosamente es la misma API, pero anda mas rapido.

' Por cada funci$F3n optimizada de esta libreria, se optimizan todos los procedimientos que
' Utilicen estas funciones, en velocidad y estabilidad.

' $E1 $E9 $ED $F3 $FA $F1 

' &lt; &gt;

' &amp;

' $24

Proc MultiByteToWideChar2(,,:Entero,:EnteroSig,:Entero,:EnteroSig):Entero, "Kernel32" "MultiByteToWideChar"

Privado:
	Uni$F3n StrAndIntToArrayByte,Str:Cadena,Bite[]:Byte
	' Decid$ED usar una uni$F3n debido al costo de memoria de los procedimientos individuales.
	' Nota: Funciona excelentemente.
P$FAblico:

'By Yuki!
Proc RepCarac(Crc:Byte,Longitud:Entero):Cadena
	Si Longitud = 0 Entonces Salir
	Resultado = Espacio(Longitud)
	FillMemory(CadPtr(Resultado),Longitud,Crc)
FinProc

'By Paul Guerra
Proc CadLong(Referencia lpStr:Cadena):Entero
  Var @Ptr,Ret:Entero
  Si lpStr = "" Entonces Salir
  Ret=CadPtr(lpStr)
  Si (Ret=0) Salir
  Ptr@=Ret-4
  Devolver Ptr
FinProc

Proc Comparar(Referencia Cad1,Cad2:Cadena,Opcional Sensitivo:Booleano):Booleano
	Devolver &gt;(Sensitivo)?(lstrcmpi(Cad1,Cad2)):(lstrcmp(Cad1,Cad2))
FinProc

' Este es el anterior, parece ser que el metodo de arriba es mas eficiente con la velocidad,
' Pero como alarg$E1r la longitud de la cadena "invalidamente" podria generar errores graves.
Proc Espacio(Longitud:Entero):Cadena
   Var Ptr:StrAndIntToArrayByte
   Si Longitud &lt;= 0 Entonces Salir
   ReDim Ptr.Bite,Longitud
   Resultado = Ptr.Str
FinProc

'By Yuki!
'Este procedimiento es muy rapido, no es necesario reemplazar.
Proc Invertir(Referencia Expresi$F3n:Cadena):Cadena
	Var Matriz1[],Matriz2[]:Byte,l,i,e:Entero
	Si Expresi$F3n = "" Entonces Salir
	Matriz1 = MatByteDeCad(Expresi$F3n)
	l = LongMat(Matriz1)
	e = l-1
	ReDim Matriz2,l
	Contar i = 0 a e
		Matriz2[i] = Matriz1[e]
		e = e - 1
	Seguir
	Resultado = CadDeMatByte(Matriz2)
FinProc

' Carac ._.
Proc Carac(bByte:Byte):Cadena
  Var Temp:Cadena,@Ptr:Byte
  Temp = " "
  Ptr@ = CadPtr(Temp)
  Ptr = bByte
  Resultado = Temp
FinProc

' Ascii ._.
Proc Ascii(Referencia lpStr:Cadena):Byte
	Var i:Entero,@Ret:Byte
	Si lpStr = "" Entonces GenerarError 1,"[Ascii] primer parametro es vacio."
	Ret@=CadPtr(lpStr)
	Devolver Ret
FinProc

Proc Izquierda(Referencia Texto:Cadena,Longit:EnteroSig):Cadena
	Si (CadLong(Texto)&lt;=Longit) Devolver Texto
	Devolver Parte(Texto,1,Longit)
FinProc

Proc Derecha(Referencia Str:Cadena,Pos1:Entero):Cadena
	Var Longi:Entero
	Si Str = "" Entonces Salir
	Longi = CadLong(Str)
	Si (Pos1 &gt; Longi) Entonces Devolver Str
	Si (Pos1 &lt;= 0) Entonces Devolver ""
	Resultado = Parte(Str,Pos1)
FinProc

Proc UnicodeACad(Referencia Texto:Cadena):Cadena
	Var Tmp:Entero,bytes[]:Byte
	Si (Texto = ""#0) O (Texto = "") Entonces Salir
	Tmp = CadLong(Texto)
	ReDim bytes,Tmp
	CopyMemory(bytes[0]@,CadPtr(Texto),Tmp)
	Resultado = Reemplazar(CadDeMatByte(bytes),#0,"")
FinProc

Proc CadAUnicode(Referencia Texto:Cadena):Cadena
	Var Temp:Entero
	Temp = CadLong(Texto)*2
	Resultado = Espacio(Temp)
	MultiByteToWideChar2(0,0,CadPtr(Texto),-1,CadPtr(Resultado),Temp)
FinProc


' ParteCad Optimizado By Yuki
Proc Parte(Referencia Texto:Cadena, Comienzo:EnteroSig, Opcional Longit:EnteroSig=-1):Cadena
	Var LenTxt:EnteroSig,@Ptr,@Ln:Entero
	Si Texto = "" Entonces Salir
	LenTxt=CadLong(Texto)
	Si (Comienzo &gt; LenTxt) Entonces Devolver Texto
	Si (Comienzo &lt;= 0) Entonces Comienzo = 1
	Si (Longit &gt; LenTxt) Entonces Longit = -1
	Longit = &gt;(Longit=-1) or (Longit + Comienzo &gt; LenTxt)?LenTxt-Comienzo+1:Longit
	Ptr@ = Resultado@
	Ln@ = Texto@
	Resultado = Espacio(Longit)
	Memoria_Copiar(Ptr,ln+Comienzo-1,Longit)
FinProc

' No son necesarias tantas sentencias, el procedimient parteCad ya hace el trabajo.
Proc Buscar(Referencia lpStr,lpMatch:Cadena,Opcional dwPos:Entero = 1):Entero
	Var i,l,r:Entero
	Si (lpStr = "") Entonces Salir
	r = CadLong(lpStr)
	Si (lpMatch = "") Entonces Salir
	l = CadLong(lpMatch)
	Si l &gt; r Entonces Salir ' Devuelve cero ya que la cadena lpMatch por ser de mayor longitud es directamente inexistente.
	Si (dwPos &lt;= 0) Entonces dwPos = 1
	Si (dwPos &gt; r) Entonces Salir
	Contar i = dwPos a r
		Si Parte(lpStr,i,l) = lpMatch Entonces Devolver i
	Seguir
FinProc


Proc BuscarInv(Referencia lpStr,lpMatch:Cadena,Opcional dwPos:Entero):Entero
  Var i,LongMatch,TotLng:Entero
  Si lpStr = "" Entonces Salir
  Si lpMatch = "" Entonces Salir
  LongMatch=CadLong(lpMatch)
  TotLng=CadLong(lpStr)-LongMatch+1
  Si (dwPos&gt;TotLng) Entonces Salir
  Si (dwPos=0) dwPos=TotLng
  Contar i = dwPos a 1 Dec
    Si (Parte(lpStr,i,LongMatch)=lpMatch) Devolver i
  Seguir
FinProc

Proc Reemplazar(Referencia Str,Match,Rep:Cadena, Opcional Pos:EnteroSig):Cadena
  Var i,LongMatch,CL,TotLng:Entero
  Si Str = "" Salir
  Si Match = "" Devolver Str
  LongMatch=CadLong(Match)
  CL=CadLong(Str)
  TotLng=CL-LongMatch+1
  Si (Pos&gt;TotLng) Salir
  Si (Pos=0) Pos=1
  Contar i = 1 a CL
    Si ((i&gt;=Pos) And (i&lt;=TotLng) And (Parte(Str,i,LongMatch)=Match))
      Resultado=Resultado+Rep
      i=i+LongMatch-1
    SiNo
      Resultado=Resultado+Parte(Str,i,1)
    FinSi
  Seguir
FinProc

' MatrizByteDeCadena By Yuki.
Proc MatByteDeCad(Referencia Temp:Cadena):Byte[]
	Var Ptr:StrAndIntToArrayByte,i:Entero
	Si Temp = "" Entonces Resultado = [0] ; Salir
	Ptr.Str = Temp
	Resultado = Ptr.Bite
	Borrar Ptr.Bite
FinProc

Proc CadPtr(Referencia lpStr:Cadena):Entero
  Var @Dir:Entero
  Dir@=lpStr@
  Resultado = Dir
FinProc

Proc Mayuscula(Referencia lpStr:Cadena):Cadena
	Si lpStr = "" Salir
	Devolver CadDePtr(CharUpper(CadPtr(lpStr)))
FinProc

Proc Minuscula(Referencia lpStr:Cadena):Cadena
	Si lpStr = "" Salir
	Devolver CadDePtr(CharLower(CadPtr(lpStr)))
FinProc

'CadenaDeMarizByte By Yuki
Proc CadDeMatByte(Referencia ByteAry[]:Byte):Cadena
  Var Ptr:StrAndIntToArrayByte
  Si LongMat(ByteAry) = 0 Entonces Salir
  Ptr.Bite = ByteAry
  Resultado = Ptr.Str
  Borrar Ptr.Bite
FinProc

' CadenaDePtrCad By Paul Guerra - Modificado!
Proc CadDePtr(PtrCad:Entero):Cadena
  Var Temp[]:Byte, LenTxt:EnteroSig
  Si PtrCad &lt;= 0 Entonces Salir
  LenTxt=lstrlenptr(PtrCad)
  Si LenTxt&lt;1 Salir
  Resultado = Espacio(LenTxt)
  Memoria_Copiar(CadPtr(Resultado),PtrCad,LenTxt)
FinProc

Proc TruncarCadena(Referencia lpStr:Cadena):Cadena 
  Var Pos:Entero
  Si lpStr = "" Entonces Salir
  Pos=Buscar(lpStr,Null)
  Si (Pos=0) Devolver lpStr
  Si (Pos=1) Salir
  Resultado = Izquierda(lpStr,Pos-1)
FinProc

Proc Separar(Referencia Texto,Sep:Cadena, Opcional PosInicio:Entero=1, Opcional MaxRet:Entero):Cadena[]
  Var Pos,Ret,Mx,SepLen,TxtLen:Entero
  Si (Texto = "") Entonces Salir
  Si (Sep = "") Entonces Resultado = [Texto]
  Si (PosInicio &lt;= 0) Entonces PosInicio = 1
  Si (MaxRet &lt; 0) Entonces MaxRet = 0
  SepLen = CadLong(Sep)
  TxtLen = CadLong(Texto)
  Borrar Resultado
  Repetir
    Ret = Buscar(Texto,Sep,Pos+1) ' Ret = la posici$F3n del separador el separador
    Si (Ret=0) Salir Repetir ' Si no se encuentra el separador, salir.
    Redim Preservar Resultado, Mx + 1 ' Redimenciona el resultado.
    Resultado[Mx] = Parte(Texto,Pos+1,Ret-Pos-1) ' Resultado.Contador =
    Pos = Ret + SepLen - 1
    Mx = Mx + 1
    Si (MaxRet) Si (Mx = MaxRet) Salir Repetir
    Si (Pos&gt;=TxtLen) Salir Repetir
  PorSiempre
  ReDim Preservar Resultado, Mx + 1
  Resultado[Mx] = &gt; (Pos&gt;=TxtLen) ? ("") : (Parte(Texto,Pos+1))
FinProc

Proc CadObtPosMat(Referencia Ex,Del:Cadena):Entero[]
	Var A,B:Entero
	Repetir
		ReDim Preservar Resultado,B + 1
		A = Buscar(Ex,Del,A+1)
		Si A Entonces B = B + 1 ; SiNo ; ReDim Preservar Resultado,LongMat(Resultado) - 1 ; Salir
		Resultado[B - 1] = A
	PorSiempre
FinProc

Clase pscCadenas, _
  Buff[]:PSCCADENASINFO, _
  MaxBuff,iHwnd:Entero
P$FAblico:
  ClaseVar Eventos:PSCCADENAS_EVENTINFO
Privado:
  Proc evCambiar()
    Si (Eventos.AlCambiar@) Eventos.AlCambiar(hWnd,0)
  FinProc
  Proc evAdd(Pos:EnteroSig)
    Si (Eventos.AlAgregar@) Eventos.AlAgregar(hWnd,Pos)
  FinProc
  Proc evDel(Pos:EnteroSig)
    Si (Eventos.AlQuitar@) Eventos.AlQuitar(hWnd,Pos)
  FinProc
  Proc EsValido(Indice:Entero)
    Si (Indice&gt;=MaxBuff) GenerarError errParamInv
  FinProc
  Proc GetItem(Indice:Entero):Cadena
    EsValido(Indice)
    Resultado=Buff[Indice].Texto
  FinProc
  Proc SetItem(Valor:Cadena, Indice:Entero)
    EsValido(Indice)
    Buff[Indice].Texto=Valor
    evCambiar()
  FinProc
  Proc GetDato(Indice:Entero):EnteroSig
    EsValido(Indice)
    Resultado=Buff[Indice].Dato
  FinProc
  Proc SetDato(Valor:EnteroSig, Indice:Entero)
    EsValido(Indice)
    Buff[Indice].Dato=Valor
  FinProc
  Proc GetCantidad:Entero
    Resultado=MaxBuff
  FinProc
P$FAblico:
  Prop hWnd:Entero
    Lec:iHwnd
    Esc:iHwnd
  FinProp
  Prop Cantidad:Entero
    Lec:GetCantidad
  FinProp
  Prop Item:Cadena
    Lec:GetItem
    Esc:SetItem
  FinProp
  Prop Dato:EnteroSig
    Lec:GetDato
    Esc:SetDato
  FinProp
  Proc Agregar(Texto:Cadena)
    MaxBuff=MaxBuff+1
    Redim Preservar Buff,MaxBuff
    Buff[MaxBuff-1].Texto=Texto
    evAdd(MaxBuff-1)
  FinProc
  Proc Insertar(Texto:Cadena, Indice:Entero)
    Var i:Entero
    EsValido(Indice)
    Agregar("")
    Contar i=Indice+1 a MaxBuff
      Buff[i]=Buff[i-1]
    Seguir
    Buff[Indice].Texto=Texto
    evAdd(Indice)
  FinProc
  Proc Eliminar(Indice:Entero)
    Var i:Entero
    EsValido(Indice)
    MaxBuff=MaxBuff-1
    Contar i=Indice+1 a MaxBuff
      Buff[i-1]=Buff[i]
    Seguir
    Redim Preservar Buff,MaxBuff
    evDel(Indice)
  FinProc
FinClase
</Contenido></Datos>
