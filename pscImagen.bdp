<Datos><Nombre></Nombre><Icono>AA==</Icono><Version><Mayor>0</Mayor><Menor>0</Menor><Revision>0</Revision><AutoIncr>0</AutoIncr></Version><Info/><Contenido>$24ADV-
$24EBC-


Importar "WinCtrls.prp"
Importar "Win.prp"

Proc MAKEROP4(fore:Entero,back:Entero):Entero
Var dem1:Entero
dem1=back Shl 8
dem1=dem1 And ROP4MASK
dem1=dem1 Or fore
   Resultado = dem1
FinProc

Privado:

Var pscImgCount:Entero

  Proc CargarImagenEnDCBltSimple_old(hdc:Entero,hBMP:Entero,rcDest:RECT,Opcional x:Entero = 0,Opcional y:Entero = 0):Booleano
            Var hDCMemory,hbmpViejo:Entero
        	Si (hBMP=0)
         	Devolver Falso
		FinSi
    		hDCMemory=CreateCompatibleDC(hDC)
      	hbmpviejo = SelectObject(hdcMemory, hBMP)
       	BitBlt(hDC, rcDest.Left, rcDest.Top, rcDest.Right, rcDest.Bottom, hDCMemory, x, y, SRCCOPY)
        	'BitBlt(hDC, 0, 0, 400, 300, hDCMemory, 0, 0, SRCAND)
		hBMP = SelectObject(hdcMemory, hbmpviejo)
            DeleteDC(hDCMemory)
		Devolver Verd
  FinProc


  Proc CargarImagenEnDCBltSimple(hDC:Entero,himg:Entero,rcDest:RECT,Opcional x:Entero = 0,Opcional y:Entero = 0):Booleano
            Var hgraph,status:Entero
            status = GdipCreateFromHDC(hDC,hgraph)
            status = GdipDrawImageRectI(hgraph,himg,rcDest.Left,rcDest.Top, rcDest.Right, rcDest.Bottom)
            GdipDeleteGraphics(hgraph)
  FinProc


  Proc CargarImagenEnDCBltComplejo_old(hDC:Entero,hBMP:Entero,rcDest:RECT,AnchoBMP:Entero,AltoBMP:Entero):Booleano
            Var hDCMemory,hbmpViejo:Entero
        	Si (hBMP=0)
         	Devolver Falso
		FinSi
    		hDCMemory=CreateCompatibleDC(hDC)
      	hbmpviejo = SelectObject(hdcMemory, hBMP)
       	StretchBlt(hDC, rcDest.Left, rcDest.Top, rcDest.Right, rcDest.Bottom, hDCMemory, 0, 0, AnchoBMP, AltoBMP, SRCCOPY)
        	'BitBlt(hDC, 0, 0, 400, 300, hDCMemory, 0, 0, SRCAND)
            hBMP = SelectObject(hdcMemory, hbmpviejo)
            DeleteDC(hDCMemory)
		Devolver Verd
  FinProc

  Proc CargarImagenEnDCBltComplejo(hDC:Entero,himg:Entero,rcDest:RECT,Anchoimg:Entero,Altoimg:Entero):Booleano
            Var hgraph,status:Entero
            status = GdipCreateFromHDC(hDC,hgraph)
            status = GdipDrawImageRectI(hgraph,himg,rcDest.Left,rcDest.Top,rcDest.Right,rcDest.Bottom)
            GdipDeleteGraphics(hgraph)
  FinProc

  Proc CargarImagenEnDCMaskBlt(hDC:Entero,hBMP:Entero,hMaskBMP:Entero,rcDest:RECT):Booleano
            Var hDCMemory,hbmpViejo:Entero
        	Si ((hBMP=0) O (hMaskBMP=0))
         	Devolver Falso
		FinSi
    		hDCMemory=CreateCompatibleDC(hDC)
      	hbmpviejo = SelectObject(hdcMemory, hBMP)
       	MaskBlt(hDC, rcDest.Left, rcDest.Top, rcDest.Right, rcDest.Bottom, hDCMemory, 0, 0, hMaskBMP, 0, 0, MAKEROP4(WHITENESS,SRCCOPY))
            hBMP = SelectObject(hdcMemory, hbmpviejo)
            DeleteDC(hDCMemory)
		Devolver Verd
  FinProc

Proc pscImagen_wndproc(hWnd,Msg,wParam,lParam:Entero):Entero
  Var Rc:RECT,Pnt:PAINTSTRUCT
  Var Obj:pscImagen
  Var TmpStr:Cadena
  Var Temp,CentroX,CentroY,vecesAncho,vecesAlto,contax,contay,ancho_cliente,alto_cliente:EnteroSig

  Obj=EnteroToControl(GetProp(hWnd,"THIS"))
  Seleccionar Msg
    Caso WM_PAINT
      Si (GetUpdateRect(hWnd,Rc,Falso))
        Temp=BeginPaint(hWnd,Pnt)
        Si (Obj.Visible)
          GetClientRect(hWnd,Rc)
          CentroX=(rc.right+rc.left-Obj.infoEncabezado.biWidth)\2
          CentroY=(rc.bottom+rc.top-Obj.infoEncabezado.biHeight)\2
          Si (Obj.infoEncabezado.Valido)
          Seleccionar Obj.Presentacion
          Caso CENTRADO
            Rc.Left=CentroX
            Rc.Top=CentroY
            Rc.Right=Obj.infoEncabezado.biWidth
            Rc.Bottom=Obj.infoEncabezado.biHeight
            CargarImagenEnDCBltSimple(Temp,obj.iImg,Rc)
          Caso CONSERVAR_ASPECTO
            Si (EntReal(Rc.Right)/EntReal(Rc.Bottom)) &gt; (EntReal(Obj.infoEncabezado.biWidth)/EntReal(Obj.infoEncabezado.biHeight))
                  'yy = Rc.Bottom
                  
                  ancho_cliente = rc.right
                  Rc.Right = RealEnt((EntReal(Obj.infoEncabezado.biWidth)/EntReal(Obj.infoEncabezado.biHeight)) * EntReal(Rc.Bottom))
                  Rc.Left=(ancho_cliente - rc.right) \ 2
                  '
            SiNo
                  'xx = Rc.Right
                  alto_cliente = Rc.Bottom
                  Rc.Bottom = RealEnt(EntReal(Rc.Right) * (1/(EntReal(Obj.infoEncabezado.biWidth)/EntReal(Obj.infoEncabezado.biHeight))))
                  Rc.Top=(alto_cliente - rc.bottom) \ 2
                  '
            FinSi
            CargarImagenEnDCBltComplejo(Temp,obj.iImg,Rc,Obj.infoEncabezado.biWidth,Obj.infoEncabezado.biHeight)
          Caso EXPANDIR
            CargarImagenEnDCBltComplejo(Temp,obj.iImg,Rc,Obj.infoEncabezado.biWidth,Obj.infoEncabezado.biHeight)
          Caso MOSAICO
            vecesAncho=rc.Right\Obj.infoEncabezado.biWidth
            vecesAlto=rc.Bottom\Obj.infoEncabezado.biHeight
            Contar contax=0 A vecesAncho
              Contar contay=0 A vecesAlto
                  Rc.Left=contax*Obj.infoEncabezado.biWidth
                  Rc.Top=contay*Obj.infoEncabezado.biHeight
                  Rc.Right=Obj.infoEncabezado.biWidth
                  Rc.Bottom=Obj.infoEncabezado.biHeight
                  CargarImagenEnDCBltSimple(Temp,obj.iImg,Rc)
              Seguir
            Seguir
          Caso MASCARA
            Si (Obj.MascaraValida)
            CargarImagenEnDCMaskBlt(Temp,obj.iImg,Obj.hBMP_Mascara,Rc)
            FinSi
          Caso Otro
            Rc.Right=Obj.infoEncabezado.biWidth
            Rc.Bottom=Obj.infoEncabezado.biHeight
            CargarImagenEnDCBltSimple(Temp,obj.iImg,Rc)
          FinSeleccionar
          FinSi
        FinSi
        EndPaint(hWnd,Pnt)
      FinSi
      Devolver 0
    Caso WM_GETTEXT
      TmpStr=Obj.StTexto
      Temp=CadLong(TmpStr)
      Si (wParam&gt;Temp) wParam=Temp
      CopyMemory(lParam,CadPtr(TmpStr),wParam)
      Devolver wParam
    Caso WM_GETTEXTLENGTH
      Devolver CadLong(Obj.StTexto)
    Caso WM_SETTEXT
      Temp=lstrlen2(lParam)
      Si (Temp=0)
        Obj.StTexto=""
      SiNo
        TmpStr=Espacio(Temp)
        CopyMemory(CadPtr(TmpStr),lParam,Temp)
        Obj.StTexto=TmpStr
      FinSi
      GetClientRect(hWnd,Rc)
      InvalidateRect(hWnd,Rc,Verd)
      Devolver 0
    Caso WM_LBUTTONUP
      Si (Obj.Habilitado)
        Si (Obj.Eventos.AlCliquear@) Obj.Eventos.AlCliquear
      FinSi
      Devolver 0
  FinSeleccionar
  Resultado=DefWindowProc(hWnd,Msg,wParam,lParam)
FinProc

Clase CadenaW
  ClaseVar mWCHAR[]:Byte
  ClaseVar cCadena:Cadena
  ClaseVar mCadena[]:Byte
  ClaseVar bCadena:Booleano

  Proc convertir(cA:Cadena):Byte[]
  Var nI:Entero
  bCadena = Falso
  Si cadlong(cA)&lt;1
   Redim Resultado,1
   Salir
  FinSi
  Redim Resultado,((cadlong(cA))+1)*2
  mCadena = MatrizByteDeCadena(cA)
  Contar nI = 0 A cadlong(cA)-1
      Resultado[nI*2] = mCadena[nI]
  Seguir
  bCadena = Verd
  FinProc

  Proc CambiarCadena(Opcional cA:Cadena="")
      Si cadlong(cA)&lt;1 Salir
      mWCHAR = Convertir(cA)
  FinProc

  Proc LeerTienaCadena():Booleano
  	Resultado=bcadena
  FinProc

  Proc LeerCad():Cadena
      Si (bcadena) Resultado = cCadena
  FinProc

  Proc EscCad(cA:Cadena)
      mWCHAR = convertir(cA)
      Si (Not bcadena) GenerarError ErrParamInv
  FinProc

  Proc LecPuntero():Entero
       Si (bcadena) Resultado =  mWCHAR@
  FinProc

Prop TienaCadena:Booleano
     Lec:LeerTienaCadena
FinProp

Prop cad:Cadena
     Lec:LeerCad
     Esc:EscCad
FinProp

Prop puntero:Entero
     Lec:LecPuntero
FinProp

Constructor:CambiarCadena
FinClase


P$FAblico:

Clase pscImagen(pscTextControl), _
  ObjNum:Entero, _
  ClassNomb:Cadena

  ClaseVar StTexto:Cadena
  ClaseVar Eventos:PSCETIQUETA_EVENTINFO
  ClaseVar iArchivo:Cadena
  ClaseVar internoPresentacion:Entero
  ClaseVar infoEncabezado:BITMAPINFOHEADER
  ClaseVar Imagen[]:Byte
  ClaseVar BMPArchivo:pscArchivo
  ClaseVar hBMP_Mascara:Entero
  ClaseVar MascaraValida:Booleano
  ClaseVar iImg:Entero
  ClaseVar gdipPuntero,status:Entero


P$FAblico:
  'proc p$FAblicos
  Proc CargarImagen(HwndParent:Entero)
    Si (ObjHwnd) Salir
    ObjHwnd=CreateWindowEx(0,ClassNomb,iTexto,SS_NOTIFY+WS_CHILD+WS_CLIPSIBLINGS+WS_TABSTOP+(&gt;Habil?0:WS_DISABLED)+ _
                           (&gt;Visib?WS_VISIBLE:0),Coords.x,Coords.y,Coords.Width,Coords.Height,HwndParent,0,Programa.hInstance,Nulo)
    Si (ObjHwnd=0) GenerarError errFalloWinCtrls
    Fuente.InsertarFuente(ObjHwnd)
    SetProp(ObjHwnd,"THIS",ObjPtr())
    SetColor(Col,0)
    ObtenerDC
    Texto=iTexto
    'internoPresentacion=EXPANDIR
    UpdateWindow(ObjHwnd)
  FinProc
  Proc DescargarImagen
    Si (ObjHwnd=0) Salir
    DestroyWindow(ObjHwnd)
    ObjHwnd=0
  FinProc
  Proc GetArchivoBMP:Cadena
	Resultado=""
  FinProc
  Proc SetArchivoBMP(tmp:Cadena)
  Var Invalid_RCT:RECT
	Si(AbrirImagen(tmp) = Falso)
         'GenerarError ParamInv
         StTexto="invalido"
      FinSi
      Invalid_RCT.right = ancho
      Invalid_RCT.bottom = alto
      InvalidateRect(hwnd,Invalid_RCT,Verd)
  FinProc
  Proc SetMaskBMP(tmp:Entero)
      hBMP_Mascara=tmp
      MascaraValida=Verd
  FinProc
  Proc LeerPresentacion:Entero
  	Resultado=internoPresentacion
  FinProc
  Proc EstPresentacion(tmp:Entero)
      Var Invalid_RCT:RECT
      internoPresentacion=tmp
      Invalid_RCT.right = ancho
      Invalid_RCT.bottom = alto
      InvalidateRect(hwnd,Invalid_RCT,Verd)
  FinProc
  Proc LeerInfo:BITMAPINFOHEADER
  	Resultado=infoEncabezado
  FinProc
  Proc Getobjhwnd():Entero
  	Resultado = objHWND
  FinProc
  Prop Archivo:Cadena
    Lec:GetArchivoBMP
    Esc:SetArchivoBMP
  FinProp
  Prop Presentacion:Entero
    Lec:LeerPresentacion
    Esc:EstPresentacion
  FinProp
  Prop Info:BITMAPINFOHEADER
    Lec:LeerInfo
  FinProp
  Prop Mascara:Entero
    Esc:SetMaskBMP
  FinProp
  Prop lhWnd:Entero
   Lec:Getobjhwnd
  FinProp
  'extra
Privado:
  Proc Registrar
    Var wndcls:WNDCLASS
    wndcls.style = CS_PARENTDC
    wndcls.lpfnwndproc = pscImagen_wndproc@
    wndcls.hInstance = Programa.hInstance
    wndcls.hCursor = LoadCursorNum(0, IDC_ARROW)
    wndcls.hbrBackground = COLOR_WINDOW
    wndcls.lpszMenuName = ""
    wndcls.lpszClassName = ClassNomb
    Si (RegisterClass(wndcls)=0) GenerarError errFalloWinCtrls
  FinProc
  Proc Inicializar
    Var GSI:GdiplusStartupInput
    Alto=25
    Ancho=81
    Color=COLOR_BTNFACE+&amp;1000000
    Habilitado=Verd
    Visible=Verd
    pscImgCount=pscImgCount+1
    ClassNomb="pscImg"+EntCad(pscImgCount)
    Registrar
    GSI.GdiplusVersion = 1
    status = GdiplusStartup(gdippuntero@,GSI@,0)
  FinProc
  Proc Finalizar
    GdiplusShutdown(gdippuntero)
    DescargarImagen
    UnregisterClass(ClassNomb,Programa.hInstance)
    Si (infoEncabezado.Valido)
      DeleteObject(infoEncabezado.biHBMP)
      infoEncabezado.Valido=Falso
    FinSi
  FinProc
  Proc AbrirBMP(DireccionBMP:Cadena):Booleano
    Si ExisteArchivo(DireccionBMP)
    Si (infoEncabezado.Valido)
      DeleteObject(infoEncabezado.biHBMP)
      infoEncabezado.Valido=Falso
    FinSi
    BMPArchivo = Nuevo pscArchivo
    BMPArchivo.Nombre = DireccionBMP
    BMPArchivo.Abrir(0)
    Redim Preservar Imagen, BMPArchivo.Tama$F1o
    BMPArchivo.Leer(Imagen[0]@, BMPArchivo.Tama$F1o)
    BMPArchivo.Cerrar
    infoEncabezado.biSize=(Imagen[SeccTam])+_
                          (Imagen[SeccTam+1]*(2^8))+_
                          (Imagen[SeccTam+2]*((2^8)^2))+_
                          (Imagen[SeccTam+3]*((2^8)^3))
    infoEncabezado.biOffset=(Imagen[SeccOffset])+_
                          (Imagen[SeccOffset+1]*(2^8))+_
                          (Imagen[SeccOffset+2]*((2^8)^2))+_
                          (Imagen[SeccOffset+3]*((2^8)^3))
    infoEncabezado.biHeaderSize=(Imagen[SeccEncTam])+_
                          (Imagen[SeccEncTam+1]*(2^8))+_
                          (Imagen[SeccEncTam+2]*((2^8)^2))+_
                          (Imagen[SeccEncTam+3]*((2^8)^3))
    infoEncabezado.biWidth=(Imagen[SeccAncho])+_
                          (Imagen[SeccAncho+1]*(2^8))+_
                          (Imagen[SeccAncho+2]*((2^8)^2))+_
                          (Imagen[SeccAncho+3]*((2^8)^3))
    infoEncabezado.biWidthReal=EntReal(infoEncabezado.biWidth)
    infoEncabezado.biHeight=(Imagen[SeccAlto])+_
                          (Imagen[SeccAlto+1]*(2^8))+_
                          (Imagen[SeccAlto+2]*((2^8)^2))+_
                          (Imagen[SeccAlto+3]*((2^8)^3))
    infoEncabezado.biHeightReal=EntReal(infoEncabezado.biHeight)
    infoEncabezado.biPlanes=(Imagen[SeccPlanos])+_
                          (Imagen[SeccPlanos]*(2^8))
    infoEncabezado.biBitCount=(Imagen[SeccBPP])+_
                          (Imagen[SeccBPP+1]*(2^8))
    infoEncabezado.biCompression=(Imagen[SeccCompresion])+_
                          (Imagen[SeccCompresion+1]*(2^8))+_
                          (Imagen[SeccCompresion+2]*((2^8)^2))+_
                          (Imagen[SeccCompresion+3]*((2^8)^3))
    infoEncabezado.biSizeImage=(Imagen[SeccImgTam])+_
                          (Imagen[SeccImgTam+1]*(2^8))+_
                          (Imagen[SeccImgTam+2]*((2^8)^2))+_
                          (Imagen[SeccImgTam+3]*((2^8)^3))
    infoEncabezado.biXPelsPerMeter=(Imagen[SeccAnchoPPM])+_
                          (Imagen[SeccAnchoPPM+1]*(2^8))+_
                          (Imagen[SeccAnchoPPM+2]*((2^8)^2))+_
                          (Imagen[SeccAnchoPPM+3]*((2^8)^3))
    infoEncabezado.biYPelsPerMeter=(Imagen[SeccAltoPPM])+_
                          (Imagen[SeccAltoPPM+1]*(2^8))+_
                          (Imagen[SeccAltoPPM+2]*((2^8)^2))+_
                          (Imagen[SeccAltoPPM+3]*((2^8)^3))
    infoEncabezado.biClrUsed=(Imagen[SeccColUs])+_
                          (Imagen[SeccColUs+1]*(2^8))+_
                          (Imagen[SeccColUs+2]*((2^8)^2))+_
                          (Imagen[SeccColUs+3]*((2^8)^3))
    infoEncabezado.biClrImportant=(Imagen[SeccColImp])+_
                          (Imagen[SeccColImp+1]*(2^8))+_
                          (Imagen[SeccColImp+2]*((2^8)^2))+_
                          (Imagen[SeccColImp+3]*((2^8)^3))
    Si (infoEncabezado.biHeight &gt; 0)'para evitar la division entre cero
    infoEncabezado.biAspecto=infoEncabezado.biWidthReal/infoEncabezado.biHeightReal
    SiNo
    GenerarError errParamInv,"Error en BMP"
    FinSi
    infoEncabezado.biHBMP = LoadImage(0, DireccionBMP, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE+LR_CREATEDIBSECTION)
    Redim Imagen,1
'    Borrar BMPArchivo
    Si (infoEncabezado.biHBMP=0)
     infoEncabezado.Valido=Falso
     Resultado=Falso
    SiNo
     infoEncabezado.Valido=Verd
     Resultado=Verd
    FinSi
    FinSi
  FinProc


  Proc AbrirImagen(DireccionImagen:Cadena):Booleano
    Var CadW:CadenaW
    Var GSI:GdiplusStartupInput
    Si (Not ExisteArchivo(DireccionImagen)) Salir
    Si (infoEncabezado.Valido)
      'DeleteObject(infoEncabezado.biHBMP)
      GdipDisposeImage(iImg)
      iImg = 0
      infoEncabezado.Valido=Falso
    FinSi

    Crear CadW(DireccionImagen)
    status = GdipLoadImageFromFile(CadW.puntero,iImg)
    status = GdipGetImageWidth(iImg,infoEncabezado.biWidth)
    status = GdipGetImageHeight(iImg,infoEncabezado.biHeight)
    infoEncabezado.biWidthReal=EntReal(infoEncabezado.biWidth)
    infoEncabezado.biHeightReal=EntReal(infoEncabezado.biHeight)
    infoEncabezado.biAspecto=infoEncabezado.biWidthReal/infoEncabezado.biHeightReal
    infoEncabezado.Valido=Verd
    Resultado = Verd
  FinProc

  Constructor:Inicializar
  Destructor:Finalizar
FinClase
</Contenido></Datos>
