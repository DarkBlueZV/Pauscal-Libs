<Datos><Nombre></Nombre><Icono>AA==</Icono><Version><Mayor>0</Mayor><Menor>0</Menor><Revision>0</Revision><AutoIncr>0</AutoIncr></Version><Info/><Contenido>'Importar "Cadena.prp"
Importar "Convertir.prp"
'Importar "Matrices.prp"

Privado:
'VARIABLES
Var h_Open:Entero
P$FAblico:

' #ProcesoObtenerID# ========================================================================
' Autor: PowerDeath
' Modificador: Nadie
' Parametros: Nombre de proceso.
' Tipo de devoluci$F3n: Entero
' Devoluci$F3n: ID del proceso
' Informaci$F3n: Obtiene el ID de un proceso por su nombre.
' #Fin# =====================================================================================

Proc ProcesoObtenerID(ProcessName:Cadena):Entero
	Var hSnapShot:EnteroSig
	Var uProcess:PROCESSENTRY32
	Var c_Check:Entero
	ProcessName = CadMinus(ProcessName)
	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,&amp;0)
	Si hSnapShot = -1 Salir
	uProcess.dwSize = Long(uProcess)
	Si ProcessFirst(hSnapShot, uProcess)
	   Repetir
	      Si CadMinus(CadDePtr(uProcess.szExeFile[0]@)) = ProcessName Entonces CloseHandle(hSnapShot) ; Devolver uProcess.th32ProcessID
	   HastaQue ProcessNext(hSnapShot, uProcess) = Falso
	FinSi
	Devolver 0
FinProc

' #ProcesoExiste# ========================================================================
' Autor: PowerDeath
' Modificador: Nadie
' Parametros: Nombre de proceso.
' Tipo de devoluci$F3n: Booleano
' Devoluci$F3n: Verd - Falso
' Informaci$F3n: Verifica si un proceso existe.
' #Fin# ==================================================================================

Proc ProcesoExiste(Referencia ProcessName:Cadena):Booleano
	Devolver &gt;ProcesoObtenerID(ProcessName)?1:0
FinProc

' #ProcesoEsperar# ========================================================================
' Autor: PowerDeath
' Modificador: Nadie
' Parametros: Nombre del proceso, Tiempo de espera por sondeo.
' Tipo de devoluci$F3n: Entero
' Devoluci$F3n: ID del proceso
' Informaci$F3n: Detiene la ejecuci$F3n del programa hasta que el proceso especificado exista.
' #Fin# ==================================================================================

Proc ProcesoEsperar(Referencia ProcessName:Cadena,Opcional IntervaloSondeo:Entero = 200):Entero
	Repetir
	   Si ProcesoExiste(ProcessName) Devolver ProcesoObtenerID(ProcessName)
	   Sleep(IntervaloSondeo)
	PorSiempre
FinProc

' #ProcesoEsperarCierre# ========================================================================
' Autor: PowerDeath
' Modificador: Nadie
' Parametros: Nombre de proceso, intervalo por sondeo.
' Tipo de devoluci$F3n: Entero
' Devoluci$F3n: ID del proceso
' Informaci$F3n: Detiene la ejecuci$F3n del programa hasta que el proceso especificado se cierre.
' #Fin# ==================================================================================

Proc ProcesoEsperarCierre(Referencia ProcessName:Cadena,Opcional IntervaloSondeo:Entero = 200)
	Mientras ProcesoExiste(ProcessName)
	   Sleep(IntervaloSondeo)
	FinMientras
FinProc

Proc ProcesoActual:Entero, "Kernel32.dll" "GetCurrentProcess"
Proc ProcesoIDActual:Entero, "Kernel32.dll" "GetCurrentProcessId"
Proc ProcesoHiloActual:Entero, "Kernel32.dll" "GetCurrentThread"
Proc ProcesoIDHiloActual:Entero, "Kernel32.dll" "GetCurrentThreadId"

' #ProcesoListar# ========================================================================
' Autor: PowerDeath
' Modificador: Nadie
' Parametros: Ninguno
' Tipo de devoluci$F3n: Matriz de cadena "Cadena[]"
' Devoluci$F3n: NombreProceso,Hilos,IDPadre,Prioridad
' Informaci$F3n: Obtiene todos los procesos y sus datos basicos.
'
' NombreProceso = El nombre del archivo ejecutable del proceso.
' Hilos = El n$FAmero de hilos de ejecuci$F3n iniciado por el proceso.
' IDPadre = El identificador del proceso que cre$F3 este proceso (el proceso padre).
' Prioridad = La prioridad de base de todos los hilos creados por este proceso.
' #Fin# ==================================================================================

Proc ProcesoListar:Cadena[]
	Var hSnapShot:EnteroSig,h_Cad:Entero
	Var uProcess:PROCESSENTRY32
	Var i:Entero
	ReDim Resultado,1
	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,&amp;0)
	Si hSnapShot = -1 Salir
	uProcess.dwSize = Long(uProcess)
	Si ProcessFirst(hSnapShot, uProcess) = 1
	   Repetir
		   ReDim Preservar Resultado,i + 1
		   Resultado[i] = CadDePtr(uProcess.szExeFile[0]@) + "|" + EntCad(uProcess.th32ProcessID) + "|" + EntCad(uProcess.cntThreads) + "|" + EntCad(uProcess.th32ParentProcessID) + "|" + EntCad(uProcess.pcPriClassBase)
		   i = i + 1
	   HastaQue ProcessNext(hSnapShot, uProcess) = Falso
	FinSi
	CloseHandle(hSnapShot)
FinProc

Proc ProcesoEstablecerPrioridad(p_ProcessName:Cadena,s_Status:Entero,Opcional ID:Entero = 0):Booleano
	Var h_Process:Entero
	h_Process = OpenProcess(PROCESS_SET_INFORMATION,Falso,&gt;ID?ID:ProcesoObtenerID(p_ProcessName))
	Resultado = SetPriorityClass(&gt;ID?ID:ProcesoObtenerID(p_ProcessName),s_Status)
	CloseHandle(h_Process)
FinProc

' #ProcesoObtenerPrioridad# ========================================================================
' Autor: PowerDeath
' Modificador: Nadie
' Parametros: Nombre de proceso[, ID]
' Tipo de devoluci$F3n: Cadena
' Devoluci$F3n: "Arriba de lo normal", "Abajo de lo normal", "Alta", "Inactiva", "Normal", "Tiempo real", "GetLastError", "Desconocido".
' Informaci$F3n: Obtiene la prioridad de un proceso por su nombre.
' #Fin# ==================================================================================

Proc ProcesoObtenerPrioridad(p_ProcessName:Cadena,Opcional ID:Entero):Cadena
	Var h_Process,Case:Entero
	h_Process = OpenProcess(PROCESS_QUERY_INFORMATION,Falso,&gt;ID?ID:ProcesoObtenerID(p_ProcessName))
	Case = GetPriorityClass(h_Process)
	Seleccionar Case
	   Caso ABOVE_NORMAL_PRIORITY_CLASS
	      Devolver "Arriba de lo normal"
	   Caso BELOW_NORMAL_PRIORITY_CLASS
	      Devolver "Abajo de lo normal"
	   Caso HIGH_PRIORITY_CLASS
	      Devolver "Alta"
	   Caso IDLE_PRIORITY_CLASS
	      Devolver "Inactiva"
	   Caso NORMAL_PRIORITY_CLASS
	      Devolver "Normal"
	   Caso REALTIME_PRIORITY_CLASS
	      Devolver "Tiempo real"
	   Caso 0
	      Devolver "Error #" + EntCad(GetLastError())
	   Caso Otro
	      Devolver "Desconocido"
	FinSeleccionar
	CloseHandle(h_Process)
FinProc

' #ProcesoAbrir# ========================================================================
' Autor: PowerDeath
' Modificador: Nadie
' Parametros: Nombre de proceso, Acceso[, ID]
' Tipo de devoluci$F3n: Entero
' Devoluci$F3n: Puntero al proceso.
' Informaci$F3n: Abre un proceso para su uso.
' #Fin# ==================================================================================

Proc ProcesoAbrir(Referencia p_ProcessName:Cadena,Acceso:Entero,Opcional ID:Entero):Entero
	Resultado = OpenProcess(Acceso,Falso,&gt;ID?ID:ProcesoObtenerID(p_ProcessName))
	h_Open = Resultado
FinProc

' #ProcesoCerrar# ========================================================================
' Autor: PowerDeath
' Modificador: Nadie
' Parametros: ID
' Tipo de devoluci$F3n: Booleano
' Devoluci$F3n: Verd - Falso
' Informaci$F3n: Cierra un proceso previamente abierto por "ProcesoAbrir".
' #Fin# ==================================================================================

Proc ProcesoCerrar(Opcional ID:Entero):Booleano
	Resultado = CloseHandle(&gt;ID?ID:h_Open)
FinProc

' #ProcesoTerminar# ========================================================================
' Autor: PowerDeath
' Modificador: Nadie
' Parametros: Nombre de proceso[, ID]
' Tipo de devoluci$F3n: Booleano
' Devoluci$F3n: Verd - Falso
' Informaci$F3n: Termina un proceso por su nombre.
' #Fin# ==================================================================================

Proc ProcesoTerminar(Referencia Nombre:Cadena,Opcional ID:Entero):Booleano
	Var h_Process:Entero
	h_Process = OpenProcess(PROCESS_TERMINATE,Falso,&gt;ID?ID:ProcesoObtenerID(Nombre))
	Resultado = TerminateProcess(&gt;ID?ID:h_Process,0)
	CloseHandle(h_Process)
FinProc
</Contenido></Datos>
